// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcb\x6e\xe3\x38\x16\xdd\xf3\x2b\x18\x79\x3b\x28\xcc\xda\x3b\x46\x62\x1c\x4d\xc9\x92\xa1\x47\x66\x32\x1b\x81\x96\xae\x65\x76\x64\x52\x20\xa9\x4a\xa7\x76\xfd\x5f\xfd\x4f\xfd\x0b\x0d\x52\xb4\xac\xc4\x09\x92\x42\xaf\x02\x23\x3a\xf7\x71\xee\xb9\xe7\x72\xd5\xc8\xd3\x49\x0a\x94\x92\x2d\xad\xe9\xff\xe2\xa2\x2c\xd6\x38\x48\xd9\x09\x30\xeb\x15\xb0\xf6\x05\xc3\xef\x5c\x1b\x1d\xa0\x78\x57\xa7\x59\x79\xf9\x68\xd7\x03\xd3\x80\x0f\xbc\xef\x31\x17\xd8\x1c\x01\xf7\xb2\x61\x3d\x8e\x77\x58\x4e\xbf\xf5\x8b\x36\x70\xc2\x1a\x8c\xe1\xa2\xc3\x03\xeb\x20\x40\x68\xd5\xf4\xa3\x36\xa0\x50\x98\x54\x45\x49\xf3\x3a\xa2\x09\x2d\x69\x7d\x47\xe2\x84\x46\x6b\x1c\x34\x4c\x60\x21\x0d\x6e\xa1\x07\x03\xd8\x7f\x6e\x93\x34\xa3\x52\x20\x0c\xd6\x86\x19\x08\xe6\x00\x71\xe1\x4a\xcb\xab\x34\x8d\xd3\xcd\x1a\x07\xe5\x71\x01\xd3\x2e\x98\x1a\x85\xe0\xa2\xbb\x02\x25\x59\x48\x92\x35\x0e\xe2\xd3\x20\x95\x99\x51\x0d\x13\x16\xb5\x07\x3c\x0e\x9d\x62\x2d\xb4\xae\x72\x05\x2d\x08\xc3\x59\x8f\x5e\x15\x5d\xe7\xb4\xc8\xaa\x3c\xa4\x6b\x1c\xdc\x31\xde\x43\x8b\x8d\xf4\xf5\xdf\xe0\xf2\x08\x0a\x6c\x1d\x4c\x60\xa6\xb5\x6c\x38\x33\xd0\xe2\xa3\xd4\x06\x8f\xa2\x05\x85\xcd\x91\x6b\xfc\x04\x2f\xc1\x07\x61\xeb\xff\x67\xe9\x2f\xc5\xfe\x29\x05\xbc\x13\xfb\x8e\x54\x49\x59\x87\x39\x8d\x68\x5a\xc6\x24\xa9\x43\x92\x3a\x16\xa6\xb4\x6b\x1c\x44\x70\x60\x63\x6f\xf0\xa5\xd3\x05\x15\x53\x52\xc7\x84\x2d\x1e\xdd\x67\x45\x59\x93\x24\xa7\x24\x7a\xbc\x08\xe3\xde\xf6\xf5\x56\x3d\xbe\x2f\x87\x98\x07\xfd\x6e\x3b\x13\x2f\xb6\x23\x1f\x62\xd1\xd6\x33\x37\x47\xa7\x2c\x3f\xa6\xf7\xe2\xd6\xb7\x8f\xf5\x2e\xcf\xfe\x43\xc3\xf2\x1f\xa5\x18\x94\xfc\x0d\x1a\x13\xa0\xe2\xb1\x28\xe9\xb6\xf6\xfa\xbf\xcb\xaa\x34\xfa\x44\xfe\x07\xae\xb4\xf9\xeb\xcf\x3f\x02\x94\x66\x16\x47\x1e\x48\x9c\x90\xdb\xc4\x12\x9c\x4a\x1c\x0f\x98\xfd\x60\xbc\x67\xfb\x1e\x02\x14\x17\x93\x06\x5d\x0f\x0b\xf5\xf3\x49\x90\x53\x50\x5b\xb0\xa5\x7d\xd4\xa0\xd0\x8e\x14\xc5\x7f\xb3\x3c\x72\xf5\x6c\x49\x19\xde\x7b\xc9\x0f\x4c\xeb\x67\xa9\x5a\xdb\x1a\x17\x8d\x54\xca\x35\x90\xe5\xf1\x26\x4e\x49\x72\xf5\xbd\x54\xbc\xe3\x82\xf5\x1f\x01\xab\xe2\xb2\x27\x24\x2c\xe3\x07\xea\x81\xb6\x8c\xf3\x62\x81\xb0\x7d\xb4\x37\xd8\x33\xd2\x48\x61\x58\x63\x1c\x23\xac\x3d\x71\xc1\xb5\x51\xcc\x48\x75\xe3\x03\x2e\x59\x4c\x25\xd6\x63\x73\x74\x01\x1d\x61\x24\xda\xc6\xe9\xb5\x2c\x6d\xd2\xd6\x4b\xd3\x05\x9d\x4a\xb8\x92\xe6\xcd\xeb\xa2\x73\x9a\x90\x92\x46\x0b\x3d\x54\x16\x76\x64\xb6\xf4\xe5\xd4\xfd\xb0\x5d\x09\x49\x44\x76\x73\x05\xd5\x2e\x22\x73\x05\x7d\xcb\x86\xb7\x89\xa1\xe5\x53\x5e\xb4\x52\xd0\x71\x29\xce\x92\xcc\xe9\x26\xce\xd2\xaf\x1a\x04\x9e\xc0\x9f\x89\xd2\xee\xb5\x4d\x65\xff\x9e\x13\x59\x6f\xf8\x72\x1a\x67\x0c\x9f\x29\xbf\x67\xe2\xb5\x4f\x56\x89\xb5\xc8\x70\x6a\xba\x03\xb3\xdc\xc1\xcb\xe0\x8f\xd0\x3c\x4d\xff\x91\xe2\xc0\xbb\x51\x31\xc3\xa5\x70\x9c\xc6\x5b\xb2\xa1\x1f\x87\xe2\x27\xd6\xc1\x97\x02\x21\xb4\x92\x03\x08\x6d\x58\xf3\x84\x36\xb4\x3c\xd3\x4c\xf3\x3c\xcb\x27\x41\x79\x26\x0f\x72\x14\xce\xaa\xfc\x6c\xb7\x70\xda\x83\x9a\xe5\x41\xa2\x68\x29\x87\x3d\x80\xc0\xac\xf5\x3e\xef\x21\xb3\x63\x7a\xfd\x7c\x6c\x97\x1e\xf0\x9e\x57\x9e\xb1\xf7\xa4\xa8\x3d\xa7\xd6\x3e\x3c\x60\xc1\xff\xcc\x67\xf8\x8e\xaa\xd1\x4a\xc8\x16\x50\x9a\x45\x74\x76\x5c\x7f\xef\xea\x92\x14\xdf\xd7\x38\x20\x6d\x8b\xed\x47\x58\xaa\xf3\xe9\x74\x3f\xcf\xa3\xf6\x17\xf0\x5f\xc3\xc4\xf2\x33\xe3\x06\x73\x83\x5b\x29\xe0\x9b\x4d\xb0\x67\xcd\xd3\x38\x90\xa6\x91\xa3\x30\x68\x47\x72\xb2\xad\xe9\x76\x57\x3e\xda\xeb\x28\xf4\x78\x38\xf0\x86\xdb\xeb\x3b\x30\xc5\x4e\x60\x40\x69\x6b\x70\x65\x5d\x54\xbb\x5d\x96\xbb\xed\x12\x7a\x1c\xac\x6d\x59\xe1\xbd\x0c\xf6\x44\xdf\xd3\xf0\xfb\xc5\xf1\x1f\x40\xf1\x03\x6f\xdc\x3c\xf1\xc1\x29\x74\xf6\xf0\x5b\x12\x7e\xaf\x76\x35\x09\xc3\xac\x4a\x7f\xc5\xcd\x5f\x15\xfe\x65\x5b\x47\x2b\xab\xf3\x37\x07\xf7\x0b\xd9\x2c\xea\x17\x92\xf8\xa9\xde\xba\x1a\x91\xef\xf1\x2e\x4e\xe8\xe4\x50\x7e\x1f\xbc\xf2\xfd\xd8\xcc\xdc\x94\xbd\x2f\x80\xf7\x70\x90\x0a\xb0\x7e\xe6\xa6\x39\xda\x97\xd4\xe2\x03\x36\xb5\xfd\x6a\x5f\xa7\x2c\xd7\xef\xa0\x3d\x58\xb0\x05\x42\x8b\xc7\xc1\x2d\xd4\x02\x96\xd3\xa2\xcc\x72\x7a\x8d\x53\xa0\x8d\x54\x5c\x74\xd3\x0a\x9e\xd7\x23\x07\x2d\x47\xd5\xc0\x35\x87\x8b\x36\x3f\x6d\xee\x72\x2c\xdf\xbf\xe5\x97\x9d\x99\x2f\xf7\x99\xfa\x3d\xf4\x52\x74\xda\x4e\xe8\x95\x21\x95\xf6\xc9\x23\x07\x98\x7c\x63\xb1\x94\x03\xa8\x83\x54\x27\xbf\x51\xd6\xce\x27\xb7\x9f\x6f\xc6\x34\x8d\xe2\x45\x34\x47\x25\x05\xff\x69\x79\xd2\xa0\x34\x66\x0a\xf0\xbf\xfd\x6d\x48\xb2\x4d\x9c\xbe\xc5\x54\xcb\x93\x68\x1f\x3d\x37\xfe\xeb\x28\x2e\xfc\xe9\x2f\x2f\x4f\xe2\x41\xc9\x23\xdf\x73\xa3\xb1\xfd\xc6\xe7\x38\x28\x79\xc2\xbd\xec\x3a\x3b\x25\x2e\xbe\x7d\xe5\xa2\xa2\x55\xc3\x35\x0a\xe3\xc2\xb9\xc0\x5b\x6b\xb0\xcf\x09\xae\xb1\x61\xfa\xe9\xad\x0d\x58\xe8\x8f\x53\xe8\x0c\x16\x3d\x6c\xeb\x30\x4b\xef\xe2\xcd\xe5\x15\x17\x2e\xad\xf7\xea\x39\x87\x10\xfa\x3b\x00\x00\xff\xff\x8c\x16\x16\xcc\x3b\x0c\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3131, mode: os.FileMode(420), modTime: time.Unix(1602657845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4f\x53\xdb\x46\x1c\xbd\xef\xa7\xf0\xd8\xd7\x4e\xa7\xe7\xdc\x16\x69\x31\x6a\x64\x49\x23\xc9\x69\xe9\x45\x43\x8c\x9a\xd2\x80\xcd\x18\xe8\xa1\xa7\x38\x04\x30\xc4\x8a\x69\x62\x52\x48\xdc\x80\x89\x09\x9e\x24\xb6\x49\x48\x30\xb1\x30\xf9\x32\xda\x95\x7c\xe2\x2b\x74\x56\x2b\x0b\x19\xe2\x96\xab\xf4\xfb\xf3\xf6\xf7\xde\xbe\xdf\x26\x32\xb9\xb9\xb9\x5c\x16\x48\x30\x85\x0c\xf4\xb3\xa0\xe9\xda\xad\x58\x1c\x6f\x5a\xee\xe1\x11\xee\x7c\xc4\xcd\x6d\x5c\x6d\xc4\x81\xa0\x18\x92\xac\x5f\x06\x78\xed\x0e\xae\x36\xdc\x63\xdb\xb5\x77\xbd\xd6\xb9\xdb\x6b\xf5\x6b\x9f\xfb\xff\xec\xe3\xda\x3b\xbc\xba\xc3\xbe\x0b\x4a\x1c\x80\x44\x66\x76\x69\x61\xd1\xcc\x03\x4e\x4c\x6b\x3a\x52\x0d\x1e\x89\x48\x47\xc6\x38\x14\x44\xc4\xdf\x8a\xc5\xc9\xdf\x7b\xe4\x78\x0b\x17\xf7\xfa\x3b\x75\xdc\x7b\x86\xd7\x2d\x77\xe3\x84\x3c\x28\xb8\x2f\x1e\xf5\x5f\xae\xba\xe7\xf5\x78\x98\x2a\x68\x3e\x08\x35\x2d\x49\x82\x94\xbc\x15\x8b\xb3\x00\xe7\xd4\xc2\xd5\x86\xf7\x75\xd3\xab\x95\x9c\xd3\xe6\xc5\x59\xe1\x5a\x8a\x28\x73\x50\xa4\xe7\x6a\x9f\xe1\x95\x03\x96\x16\x34\xb6\xd6\xdc\xee\xa1\x0f\x34\x6f\x4e\x9b\xd9\xc5\x99\xa9\x59\x30\x84\xd1\x50\x91\x26\xa7\x55\x0e\xd1\x7c\x06\xb3\xfe\xc1\xfb\x74\x70\x71\x56\xf0\xda\x07\xee\xe1\x76\xff\xe9\x81\x73\xfa\x98\x54\xd7\xf1\xca\xb1\x57\xa8\x38\xa7\x36\xa9\x76\xe3\x23\x8a\x18\xbf\xc8\xd2\x4d\x2b\xe1\x72\xdb\xad\x34\x70\xc9\x2f\x36\x0e\xd3\xa2\x6e\x70\x2a\xe2\x91\xa4\x0b\x50\x34\x38\x28\xf9\x67\x63\x7d\xe8\x34\xec\x6d\xaf\x55\xc7\x6b\x4d\x62\xb5\x9c\x53\xcb\x5b\xee\xb1\x26\xfe\x40\x40\xe2\xb7\xdc\xc2\x22\x98\x90\x35\xdd\x80\xa2\x8a\x20\x3f\x79\xc9\x26\x83\x1c\xa1\x3b\xc0\xee\x47\x87\x4c\x5d\x87\x1c\xe6\xb9\x76\x99\x41\x1e\x50\x76\xbd\x80\x31\x36\x69\x28\xaa\xfc\x23\xe2\xf4\x9b\xd6\xaa\x7d\x71\x5f\xb6\x7c\xf4\xda\xa4\xa6\xa3\x94\x11\xa8\x70\x5c\x4e\x4b\x7c\x20\xc2\x95\x22\x93\x1c\xa9\xbe\x27\xd5\xae\xa0\xf8\xe1\x92\x4c\x43\xe1\x1d\x28\x88\x70\x4c\xa4\xb3\x11\x94\x98\xf7\xf9\x11\xe9\x6e\xd2\xc1\x9c\x1c\xc7\x81\xa0\x31\x51\xf8\x10\x2f\x65\xe8\xeb\x83\xd5\x8a\x03\x00\x12\x4b\x0b\x66\x1e\x28\x50\xd3\x7e\x92\x55\xde\x6f\x9e\x82\x3a\x37\xe1\x4b\x69\xd5\xdd\x2b\xf4\x2b\x3b\x5e\xbb\x1d\x07\xb2\x2a\x24\x05\x09\x8a\xc3\x21\x4f\x76\x87\xa3\xd2\xda\xa5\x24\x21\xa7\x0b\x77\x28\x34\xb7\xd2\x20\xc5\x0e\xa9\xbe\xc5\x9b\x94\x6e\x7f\x1a\x1d\xaf\x50\xa1\x97\xa8\x55\x73\x37\x57\xf1\x5f\xdb\xfe\xa9\xfc\xec\xe8\xf9\x29\xe6\x66\x9d\xe5\xfb\x11\x90\x4f\x09\xd2\x28\x61\xc4\xa6\xa6\xe7\x66\xb2\x31\x16\xce\xf4\xe1\xed\xbf\x8b\x48\x24\x8a\x4e\x45\x22\xd4\x11\x1f\x61\x2c\x80\xf9\xb1\x16\xca\x93\xf1\x13\x07\x22\x0f\x95\xb0\x69\x5a\xe1\xa1\xdf\x94\x7e\x1d\x6a\xe6\x7c\x6d\x91\xca\x97\x40\x8c\x79\xf3\xde\x4c\x2e\x3b\x90\x89\x8a\x92\x82\x2c\xdd\xe8\xbe\xe1\x52\x17\xef\xee\x46\x65\x12\xb9\x25\x20\xf1\x67\x2e\x6b\x0e\xaa\xd2\x9b\x76\xb3\x9a\x83\x0a\x43\xea\x5b\x6e\xb8\xbd\x8f\x5e\xab\x86\x8b\x4f\x87\xfd\x24\x2d\x52\x2b\xf1\x9e\x74\x70\xf9\x39\xf5\x9e\xe2\x11\x53\x3d\x63\x8e\xbc\x7e\x40\x76\x0f\xfa\x2b\x96\xdb\x63\xda\x15\x52\x30\x89\x46\x25\x6e\x55\xf1\x72\x79\x44\x22\x48\xe4\xe6\xcd\xec\xc2\xe2\x54\xe6\x3e\x48\x22\x7d\x30\x25\xa4\xaa\xb2\x4a\xd9\x5f\x3f\x67\x45\xd8\x48\x68\xfc\x7c\x3e\xf7\xbb\x99\x59\x4c\x99\x73\x77\xcd\x7c\xc8\x27\xe4\xf9\x90\x3f\x76\x42\xd2\xb1\xf1\xc6\x5e\x24\x23\xf4\x97\x80\xef\x51\x1a\x62\x94\x5f\x33\x97\x41\xd6\x04\xd4\x8c\x60\x52\x34\xc5\x0f\x8e\xfa\xc2\xc5\x59\xe1\x1b\xc6\x94\xcd\x4d\x9b\x40\x92\x79\x14\x1a\x53\xe0\xf0\x86\x0e\xb5\xdb\x94\xb1\x95\x13\xc7\x7e\xee\x6d\x3c\x74\x1f\x7e\x21\x5b\x47\xfd\xb5\x32\x79\x66\x39\xbd\x2a\x69\xbe\xc6\xd5\x06\x59\x3f\xf4\x6a\xa5\xef\x62\x5e\xbb\xe3\x36\xd7\xf1\xf9\x0a\x6e\x2d\x3b\xf6\x7b\xf6\x19\xb7\x4a\xa4\xbd\xf5\x3d\x6d\x73\x77\x2a\x73\x7f\x69\x1e\x66\x32\xb9\xa5\xec\x22\x50\xa0\x0a\x53\x06\x4a\x29\xfa\x24\xed\x50\x7e\x48\xb6\x8e\x06\xde\x40\x0f\xae\xa5\x15\x45\x56\x75\xdf\x1c\x2d\x52\x69\x93\x12\xdd\x48\xee\x07\x1b\xbf\x7a\x1c\x07\xdc\x04\xe2\x6e\x47\x76\xd8\x5e\xad\xff\xb6\x14\x4a\x2a\xb4\xbf\x31\xc8\xdd\x4e\x2b\x06\xe4\x38\x39\x2d\xdd\xd4\x08\x71\x7d\xcd\xb1\x7b\xde\xa7\x37\xb8\xdc\x19\x61\x87\x20\x31\x3f\x3b\x95\xbd\xb2\x61\xfe\xa7\x6c\x54\xcf\xd7\xcb\x46\x36\xf5\x98\x3f\x27\x10\x60\x1f\x17\x44\xc4\x2c\x61\x20\x5f\x66\xba\x41\x7d\x0a\x95\x3c\x5f\x73\xec\x13\xbc\x6a\xe1\xe2\x1a\xb1\xf6\xa3\xf8\x87\x2e\x0e\xab\x18\xae\x6d\xc6\x1e\x8b\xfe\xc6\xda\x56\x91\xa6\xcb\x2a\xba\x12\x4e\x0a\xfb\xb8\x6e\x0d\xc2\x43\xfd\xaa\xe6\x42\x6e\x29\x9f\x31\xaf\x8f\x24\x72\x8c\xff\x00\x1f\x25\xed\xca\xce\xba\xd4\xf3\xd0\x86\xfa\xf0\xca\xe9\x3e\xb9\xa2\x6a\xef\xeb\x4b\xaf\x56\x22\xcd\x3a\x93\x67\x00\x71\x76\x7a\x6a\x9e\x79\x64\x68\xb0\x6c\x92\x78\xb3\x44\x9a\x07\xb8\x78\x44\x85\x15\x18\x65\xf7\x87\xc0\x4f\x45\x39\x29\x48\x57\x33\x42\x3b\x65\x7b\xda\x6f\xe0\x47\xf3\x82\x16\x2c\x3a\xf6\xf4\x72\xdf\x14\x48\x73\x9f\xfe\x62\x29\xee\x8e\xdd\xdf\x59\x8d\x8d\x58\x2c\x20\x91\x99\x59\x00\x9c\xa0\xf9\x17\xee\xea\x2d\xa4\x48\x07\x2f\x03\xb2\xfe\x8e\x94\xcb\xce\x69\xd3\x7d\xf1\xc8\xb1\x6d\xbc\x51\xa3\xd9\x7f\xcc\x71\xb9\xec\xaf\x33\xf7\xc0\x9d\x94\xc1\xc9\xd2\xb8\x90\xbc\x7c\x5a\x30\x3f\x8b\x3c\x2d\x00\x00\xff\x06\x00\x00\xff\xff\x3c\xab\x31\x93\x74\x0a\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2676, mode: os.FileMode(420), modTime: time.Unix(1602657837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
