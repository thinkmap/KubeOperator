# docker
- name: 获取docker版本信息
  shell: "dockerd --version | awk '{print $3}' | sed s/,//"
  register: docker_ver

- block:
    - name: 下载新 docker 二进制文件
      copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
      with_items:
        - containerd
        - containerd-shim
        - docker-init
        - runc
        - docker
        - ctr
        - dockerd
        - docker-proxy
      notify:
        restart_docker
  when: 'docker_ver.stdout < docker_version'

- name: 获取 registry 信息
  shell: "cat /etc/docker/daemon.json"
  register: daemon

- name: 添加 registry
  shell: sed -i 's/"]/","{{registry_prefix}}:{{registry_port}}"]/g' /etc/docker/daemon.json
  when: 'registry not in daemon.stdout'

- name: 添加 kubeapps registry
  shell: sed -i 's/"]/","{{ kubeapps_registry_hostname }}"]/g' /etc/docker/daemon.json
  when:
    - 'kubeapps_install is defined'
    - 'kubeapps_install'
    - 'kubeapps_registry_hostname not in daemon.stdout'

- name: restart_docker
  service:
    name: "docker"
    state: restarted
  when: 'registry not in daemon.stdout or (kubeapps_install is defined and kubeapps_install and kubeapps_registry_hostname not in daemon.stdout)'

- name: 获取 kube-worker 版本信息
  shell: "kubectl version --short | grep Client | awk '{print $3}' | tr -d 'a-zA-Z'"
  register: kube_ver

- block:
    - name: 下载 kubelet,kube-proxy 二进制和基础 cni plugins
      copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
      with_items:
        - kubectl
        - kubelet
        - kube-proxy
        - bridge
        - host-local
        - loopback
      notify:
       restart_worker

    - name: 轮询等待kubelet启动
      shell: "systemctl status kubelet.service|grep Active"
      register: kubelet_status
      until: '"running" in kubelet_status.stdout'
      retries: 8
      delay: 2
  when: 'kube_ver.stdout < kube_version'